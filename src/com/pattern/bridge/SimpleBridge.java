package com.pattern.bridge;

/**
 * 将抽象和实现解耦，使得两者可以独立的变化
 * Abstraction：抽象化角色，定义出该角色的行为，同时保存一个对实现化角色的引用，该角色一般是抽象类
 * Implementor：实现化角色，它是接口或者抽象类，定义角色必须的行为和属性
 * RefinedAbstraction:修正抽象化的角色，引用实现化角色对抽象化角色进行修正
 * ConcreteImplementor:具体实现化角色，它实现接口或抽象类定义的方法和属性
 * 使用场景：不希望或不适用使用继承的场景
 *           接口或抽象类不稳定的场景
 *           重用性要求较高的场景
 *           桥接模式主要考虑如何拆分抽象和实现
 * 采用桥接模式，将一方与桥绑定，即实现桥接口，另一方在抽象类中调用桥接口（指向的实现类），这样桥方可以通过实现桥接口
 * 进行单方面扩展，而之间的调用就从桥接口来作为突破口
 *
 */
public class SimpleBridge {
}
